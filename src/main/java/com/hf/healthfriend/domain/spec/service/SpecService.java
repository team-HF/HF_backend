package com.hf.healthfriend.domain.spec.service;

import com.hf.healthfriend.domain.member.entity.Member;
import com.hf.healthfriend.domain.member.repository.MemberRepository;
import com.hf.healthfriend.domain.spec.dto.SpecDto;
import com.hf.healthfriend.domain.spec.entity.Spec;
import com.hf.healthfriend.domain.spec.repository.SpecRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class SpecService {
    private final SpecRepository specRepository;
    private final MemberRepository memberRepository;

    /**
     * 경력 및 수상이력을 추가한다.
     *
     * @param dtos 경력 및 수상이력 정보가 담긴 DTO 리스트
     * @return Autogenerated IDs
     */
    public List<Long> addSpec(Long memberId, @Validated List<SpecDto> dtos) {
        if (dtos == null) {
            return List.of();
        }

        List<Spec> specs = dtos.stream()
                .map((dto) ->
                        new Spec(
                                // addSpec 메소드는 MemberService에서 사용될 수 있다. (회원 등록 / 회원 정보 수정)
                                // 그러므로 영속성 컨텍스트에 있는 Member 엔티티를 그대로 들고 온다.
                                this.memberRepository.findById(memberId)
                                        .orElseThrow(), // TODO: 구체적인 예외 사용
                                dto.getStartDate(),
                                dto.getEndDate(),
                                dto.isCurrent(),
                                dto.getTitle(),
                                dto.getDescription()
                        ))
                .toList();

        List<Spec> saved = this.specRepository.saveAll(specs);
        return saved.stream()
                .map(Spec::getSpecId)
                .toList();
    }

    public List<SpecDto> getSpecsOfMember(Long memberId) {
        return this.specRepository.findByMemberId(memberId)
                .stream()
                .map(SpecDto::of)
                .toList();
    }
}
