package com.hf.healthfriend.domain.review.service;

import com.hf.healthfriend.domain.matching.entity.Matching;
import com.hf.healthfriend.domain.matching.exception.MatchingNotFoundException;
import com.hf.healthfriend.domain.matching.repository.MatchingRepository;
import com.hf.healthfriend.domain.member.constant.FitnessLevel;
import com.hf.healthfriend.domain.member.entity.Member;
import com.hf.healthfriend.domain.member.exception.MemberNotFoundException;
import com.hf.healthfriend.domain.member.repository.MemberRepository;
import com.hf.healthfriend.domain.review.constants.EvaluationType;
import com.hf.healthfriend.domain.review.dto.request.ReviewCreationRequestDto;
import com.hf.healthfriend.testutil.SampleEntityGenerator;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.*;

@SpringBootTest
@Transactional
class TestReviewService {

    @Autowired
    ReviewService reviewService;

    @Autowired
    MatchingRepository matchingRepository;

    @Autowired
    MemberRepository memberRepository;

    @DisplayName("addReview - success")
    @Test
    void addReview_success() {
        Object[] dummyData = generateDummyData();
        Member member2 = (Member)dummyData[1];
        Matching savedMatching = (Matching)dummyData[2];

        Long autogeneratedId = this.reviewService.addReview(ReviewCreationRequestDto.builder()
                .reviewerId(member2.getId())
                .score(3)
                .evaluationType(EvaluationType.GOOD)
                .description("sample-description")
                .matchingId(savedMatching.getMatchingId())
                .build());
        assertThat(autogeneratedId).isNotNull();
    }

    @DisplayName("addReview - reviewer가 없는 회원일 경우 MemberNotFoundException 발생")
    @Test
    void addReview_expectedMemberNotFoundException() {
        Object[] dummyData = generateDummyData();
        Member member2 = (Member)dummyData[1];
        Matching savedMatching = (Matching)dummyData[2];

        assertThatExceptionOfType(MemberNotFoundException.class)
                .isThrownBy(() ->
                        this.reviewService.addReview(ReviewCreationRequestDto.builder()
                                .reviewerId(member2.getId() + 1)
                                .score(3)
                                .evaluationType(EvaluationType.GOOD)
                                .description("sample-description")
                                .matchingId(savedMatching.getMatchingId())
                                .build()));
    }

    @DisplayName("addReview - 없는 매칭에 대해 리뷰를 남길 경우 MatchingNotFoundException 발생")
    @Test
    void addReview_expectedMatchingNotFoundException() {
        Object[] dummyData = generateDummyData();
        Member member1 = (Member)dummyData[0];
        Matching savedMatching = (Matching)dummyData[2];

        assertThatExceptionOfType(MatchingNotFoundException.class)
                .isThrownBy(() ->
                        this.reviewService.addReview(ReviewCreationRequestDto.builder()
                                .reviewerId(member1.getId() + 1)
                                .score(3)
                                .evaluationType(EvaluationType.GOOD)
                                .description("sample-description")
                                .matchingId(savedMatching.getMatchingId() + 1)
                                .build()));
    }

    private Object[] generateDummyData() {
        Member member1 = SampleEntityGenerator.generateSampleMember("sample1@gmail.com", "nick1");
        Member member2 = SampleEntityGenerator.generateSampleMember("sample2@gmail.com", "nick2");
        member1.setFitnessLevel(FitnessLevel.ADVANCED);
        member2.setFitnessLevel(FitnessLevel.BEGINNER);
        this.memberRepository.save(member1);
        this.memberRepository.save(member2);

        Matching savedMatching = this.matchingRepository.save(new Matching(member1, member2));
        return new Object[] {
                member1, member2, savedMatching
        };
    }
}